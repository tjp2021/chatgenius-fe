{
  "projectName": "SOA Chat Application Frontend",
  "description": "A Next.js 14 frontend that is part of a service-oriented architecture chat application featuring real-time chat, AI-powered interactions, and systematic documentation of development and debugging processes.",
  "rules": {
    "paslCommand": {
      "trigger": "Run PASL",
      "description": "Executes a complete Problem Analysis, Solution Attempts, Final Solution, and Lessons Learned cycle for Next.js frontend issues",
      "sequence": [
        {
          "step": "Problem Analysis",
          "template": "Problem Analysis [CG-{YYYYMMDD}-{sequential_number}]\n\n- **Issue Description**: {description}\n- **Symptoms**: {observed behavior}\n- **Impact**: {what's affected}\n- **Initial Investigation**: {first findings}\n- **Root Cause Hypotheses**: {possible causes}\n- **Client-Side Context**: {browser/device details}\n- **React Component Tree**: {affected components}"
        },
        {
          "step": "Solution Attempts",
          "template": "Solution Attempts [CG-{YYYYMMDD}-{sequential_number}]\n\n- **Attempt 1**: {description}\n  - Implementation: {code changes}\n  - Result: {outcome}\n  - Performance Impact: {any performance changes}\n  - Learnings: {what we discovered}\n- **Attempt 2**: {description}\n  - Implementation: {code changes}\n  - Result: {outcome}\n  - Performance Impact: {any performance changes}\n  - Learnings: {what we discovered}"
        },
        {
          "step": "Final Solution",
          "template": "Final Solution [CG-{YYYYMMDD}-{sequential_number}]\n\n- **Solution Description**: {what was done}\n- **Implementation Details**: {how it was done}\n- **Component Updates**: {affected components}\n- **State Management Changes**: {state/store updates}\n- **Performance Verification**: {metrics and improvements}\n- **Cross-browser Testing**: {browser compatibility}\n- **Side Effects**: {any implications}"
        },
        {
          "step": "Lessons Learned",
          "template": "Lessons Learned [CG-{YYYYMMDD}-{sequential_number}]\n\n- **Technical Insights**: {what we learned about Next.js/React}\n- **Component Design Improvements**: {better patterns discovered}\n- **Performance Optimizations**: {what could be optimized}\n- **Prevention Strategies**: {how to avoid similar issues}\n- **Documentation Updates**: {what needs to be updated}"
        }
      ],
      "output": {
        "format": "markdown",
        "divider": "==================================================================",
        "autoSave": false
      }
    },
    "deduceCommand": {
      "trigger": "Run deduce",
      "description": "Analyzes the context window to deduce error sources and create an implementation plan for debugging Next.js/React-specific issues",
      "workflow": {
        "contextAnalysis": {
          "steps": [
            "Review all prior solution attempts",
            "Identify patterns in React component lifecycle issues",
            "Map component dependencies and prop drilling",
            "Isolate common failure points in Next.js routing",
            "Check React hook usage and rules",
            "Analyze client/server component boundaries",
            "Review data fetching patterns"
          ]
        },
        "deductiveReasoning": {
          "process": [
            "Process of elimination",
            "Chain of thought reasoning",
            "Logical deduction",
            "Next.js/React-specific pattern recognition"
          ],
          "output": {
            "format": "markdown",
            "sections": [
              {
                "title": "Next.js Error Pattern Analysis",
                "content": [
                  "Identified patterns in React errors",
                  "Common component lifecycle issues",
                  "Server/Client component problems",
                  "State management complications",
                  "Environmental factors affecting the Next.js app"
                ]
              },
              {
                "title": "Component Risk Analysis",
                "content": [
                  "High-risk components identified",
                  "Prop drilling assessment",
                  "State management impact",
                  "Performance bottlenecks",
                  "Hydration issues",
                  "Route conflicts"
                ]
              },
              {
                "title": "Solution Candidates",
                "content": [
                  "Potential Next.js-specific solutions ranked by likelihood",
                  "Implementation complexity considering React architecture",
                  "Risk mitigation strategies within Next.js constraints",
                  "Expected outcomes based on React behavior",
                  "Performance implications"
                ]
              }
            ]
          }
        }
      }
    },
    "developmentGuidelines": {
      "codeQualityPrinciples": {
        "description": "Core principles for Next.js frontend development",
        "principles": [
          {
            "name": "DRY (Don't Repeat Yourself)",
            "description": "Code must not contain duplicated logic or implementations",
            "requirements": [
              "Extract repeated UI patterns into reusable components",
              "Create shared hooks for common functionality",
              "Implement proper component composition",
              "Use shared types and interfaces"
            ]
          },
          {
            "name": "SOLID Principles",
            "description": "All code must adhere to SOLID principles adapted for React",
            "principles": [
              {
                "name": "Single Responsibility",
                "description": "Each component should have only one reason to change"
              },
              {
                "name": "Open/Closed",
                "description": "Components should be open for extension but closed for modification"
              },
              {
                "name": "Liskov Substitution",
                "description": "Child components must be substitutable for their parent interfaces"
              },
              {
                "name": "Interface Segregation",
                "description": "Components should not be forced to depend on props they don't use"
              },
              {
                "name": "Dependency Inversion",
                "description": "Depend on abstractions (interfaces/props), not concrete implementations"
              }
            ]
          },
          {
            "name": "Component Organization",
            "description": "Proper component organization and dependency management",
            "requirements": [
              "Feature-based component organization",
              "Clear component boundaries",
              "Smart separation of client/server components",
              "Appropriate use of layouts and templates"
            ]
          },
          {
            "name": "State Management Best Practices",
            "description": "Following React/Next.js state patterns",
            "requirements": [
              "Use appropriate state management (local vs. global)",
              "Implement proper state derivation",
              "Handle server/client state properly",
              "Optimize re-renders"
            ]
          },
          {
            "name": "Error Handling",
            "description": "Proper error handling in Next.js",
            "requirements": [
              "Implement error boundaries",
              "Handle loading states",
              "Proper error page implementation",
              "API error handling"
            ]
          },
          {
            "name": "Performance Optimization",
            "description": "Best practices for frontend performance",
            "requirements": [
              "Implement proper code splitting",
              "Use appropriate image optimization",
              "Handle component memoization correctly",
              "Optimize data fetching patterns"
            ]
          }
        ]
      },
      "nextPatterns": {
        "componentDesign": {
          "rules": [
            "Clear separation of concerns in components",
            "Proper prop typing and validation",
            "Smart use of server/client components",
            "Efficient re-render management"
          ],
          "bestPractices": {
            "composition": "Favor composition over inheritance",
            "stateHandling": "Keep state as local as possible",
            "dataFetching": "Use appropriate data fetching patterns"
          }
        },
        "routingPatterns": {
          "rules": [
            "Clear route organization",
            "Proper dynamic route handling",
            "Efficient parallel routes usage",
            "Smart loading state management"
          ],
          "bestPractices": {
            "navigation": "Use Next.js Link and navigation APIs",
            "loading": "Implement suspense boundaries",
            "caching": "Use proper cache strategies"
          }
        },
        "stateManagement": {
          "rules": [
            "Keep state closest to where it's used",
            "Implement proper global state patterns",
            "Handle hydration correctly",
            "Optimize context usage"
          ],
          "bestPractices": {
            "stores": "Use appropriate state management solutions",
            "context": "Optimize Context API usage",
            "revalidation": "Implement proper cache revalidation"
          }
        }
      },
      "antiPatterns": {
        "description": "Patterns to avoid in Next.js development",
        "forbidden": [
          {
            "pattern": "Client Component Misuse",
            "description": "Using client components when server components would be more efficient",
            "example": "Making everything a client component by default",
            "prevention": "Start with server components, add 'use client' only when needed"
          },
          {
            "pattern": "Prop Drilling",
            "description": "Passing props through multiple levels of components",
            "example": "Passing user data through 5 levels of components",
            "prevention": "Use proper state management or context"
          },
          {
            "pattern": "Layout State",
            "description": "Keeping mutable state in layouts",
            "example": "Managing user preferences in root layout",
            "prevention": "Use proper client-side state management"
          },
          {
            "pattern": "Improper Hook Usage",
            "description": "Breaking React hook rules",
            "example": "Conditional hook calls",
            "prevention": "Follow hook rules strictly"
          },
          {
            "pattern": "Premature Optimization",
            "description": "Over-optimizing before measuring",
            "example": "Memoizing everything without profiling",
            "prevention": "Profile first, optimize where needed"
          },
          {
            "pattern": "Direct DOM Manipulation",
            "description": "Bypassing React's virtual DOM",
            "example": "Using direct document queries",
            "prevention": "Use refs and React patterns"
          }
        ]
      }
    },
    "documentCommand": {
      "trigger": "Run doc",
      "description": "Generates Next.js/React-specific technical documentation",
      "categories": {
        "component": {
          "required": [
            "type",
            "props_interface",
            "state_management",
            "hooks_used",
            "child_components",
            "data_fetching",
            "error_boundaries",
            "performance_optimizations",
            "accessibility",
            "styling_approach"
          ]
        },
        "page": {
          "required": [
            "route",
            "layout",
            "loading_state",
            "error_handling",
            "meta_data",
            "data_requirements",
            "caching_strategy",
            "dynamic_segments"
          ]
        },
        "hook": {
          "required": [
            "purpose",
            "dependencies",
            "return_value",
            "error_states",
            "cleanup",
            "usage_example",
            "performance_considerations"
          ]
        },
        "store": {
          "required": [
            "state_structure",
            "actions",
            "selectors",
            "side_effects",
            "persistence",
            "hydration_strategy"
          ]
        }
      }
    },
    "narrowScope": {
      "principles": ["DRY", "SRP"],
      "prohibitedActions": [
        "Mixing client/server concerns",
        "Breaking React hooks rules",
        "Direct DOM manipulation"
      ],
      "requiredActions": [
        "Proper component organization",
        "Clean separation of concerns",
        "Proper use of Next.js patterns"
      ]
    }
  }
}